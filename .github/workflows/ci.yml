name: CI/CD with image tagging and ArgoCD sync

on:
  push:
    branches:
      - main  # Запуск при пуші в гілку main

env:
  IMAGE_NAME: ghcr.io/valentin1982/devops-test  # Ім'я Docker-образу

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest  # Виконання на Ubuntu runner

    steps:
      - name: Checkout code
        uses: actions/checkout@v4  # Клонування репозиторію

      # Налаштування середовища Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # Встановлення залежностей
      - name: Install dependencies
        run: npm ci

      # Запуск юніт-тестів
      - name: Run unit tests
        run: npm run test

      # Запуск лінтера (не зупиняє процес у разі помилок)
      - name: Run linter
        run: npm run lint || true

      # Аудит безпеки залежностей (не зупиняє процес)
      - name: Run security audit
        run: npm audit --audit-level=moderate || true

      # Налаштування Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Аутентифікація в GitHub Container Registry
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Отримання короткого SHA коміту
      - name: Get short SHA
        id: vars
        run: echo "sha_tag=$(git rev-parse --short HEAD)" >> "$GITHUB_OUTPUT"

      # Побудова і пуш Docker-образу з кешуванням
      - name: Build & Push Docker image with cache
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.sha_tag }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Встановлення yq для редагування YAML
      - name: Install yq
        run: |
          sudo snap install yq

      # Створення deployment.yaml з шаблону
      - name: Generate deployment.yaml from template
        run: |
          cp ./k8s/deployment.template.yaml ./k8s/deployment.yaml
          sed -i "s|\${IMAGE_TAG}|${{ steps.vars.outputs.sha_tag }}|g" ./k8s/deployment.yaml

      # Коміт і пуш зміненого deployment.yaml (для ArgoCD sync)
      - name: Commit and push updated deployment.yaml
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add ./k8s/deployment.yaml
          git commit -m "Update image tag to ${{ steps.vars.outputs.sha_tag }}"
          git push
